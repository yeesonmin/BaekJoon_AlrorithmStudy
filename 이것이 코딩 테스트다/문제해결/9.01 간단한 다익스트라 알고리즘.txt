#include <iostream>
#include <vector>

#define INF 1e9 
using namespace std;

// 노드의 개수(N), 간선의 개수(M), 시작 노드 번호(Start)
// 노드의 개수는 최대 100,000개라고 가정
int n, m, start;
// 각 노드에 연결되어 있는 노드에 대한 정보를 담는 배열
vector<pair<int, int>> graph[100001];
// 방문한 적이 있는지 체크하는 목적의 배열 만들기
bool visited[100001];
// 최단 거리 테이블 만들기
int d[100001];


int getSmallestNode() {
	int min_value = INF;
	int index = 0;
	for (int i = 1; i <= n; i++) {
		if (d[i] < min_value && !visited[i]) {
			min_value = d[i];
			index = i;
		}
	}

	return index;
}
void dijkstra(int start) {
	d[start] = 0;
	visited[start] = 0;

	for (int i = 0; i < graph[start].size(); i++) {
		d[graph[start][i].first] = graph[start][i].second;
	}

	for (int i = 0; i < n - 1; i++) {
		int now = getSmallestNode();
		visited[now] = true;

		for (int i = 0; i < graph[now].size(); i++) {

			int cost = d[now] + graph[now][i].second;

			if (cost < d[graph[now][i].first]) {
				d[graph[now][i].first] = cost;
			}
		}
	}
}
void main() {
	cin >> n >> m >> start;

	for (int i = 0; i < m; i++)
	{
		int a, b, c;
		cin >> a >> b >> c;
		// a번 노드에서 b번 노드로 가는 비용이 c라는 의미
		graph[a].push_back({ b, c });
	}
	
	fill_n(d, 100001, INF);

	dijkstra(start);

	for (int i = 1; i <= n; i++) {
		if (d[i] == INF) {
			cout << "INFINITY" << '\n';
		}
		else {
			cout << d[i] << '\n';
		}

	}
}